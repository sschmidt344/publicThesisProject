Americans rely on the FDA to evaluate whether medical products, such as drugs, diagnostic
tests and other medical devices have been shown to be safe and effective.
When a public health emergency hits, like an infectious disease outbreak we’re facing
with COVID-19, there may be an urgent need for products to diagnose, treat or prevent
a medical threat.
In certain types of emergencies, the FDA can issue an Emergency Use Authorization, or EUA,
to provide more timely access to drugs, diagnostic tests or other critical medical products that
may help during the emergency when there are no adequate, approved, and available options.
The EUA process is different than full approval of these products because in some emergency
situations, we just cannot wait for all the evidence needed for full FDA approval.
Instead, the FDA evaluates the options very quickly using the evidence that is available
and carefully balances any known or potential risks of these unproven products with any
known or potential benefits to the public of making them available during the emergency.
For example: while we need to move quickly, it is not in the best interest of Americans
for the FDA to allow use of a test that doesn’t work as it should.
False test results can contribute to the spread of an infectious disease like COVID-19.
EUAs are just one of several tools the FDA can use to help make important medical products
available quickly during emergencies.
For more information on FDA’s efforts against COVID-19, please visit FDA.gov
